#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -------------------------------------------------------------------------------------------
            // | ESC |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  | BKSP |BKSP|
            // | TAB  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |   "|"    |
            // | CAPS  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |     ENTER     |
            // |  SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  |   SHFT   |  UP  |   /   |
            // |  CTL  |  WIN  |  ALT  |           SPACE             | FN(1) | WIN | LEFT | DOWN | RIGHT |
            // -------------------------------------------------------------------------------------------

            bindings = <
&kp ESC    &kp Q     &kp W     &kp E  &kp R  &kp T      &kp Y  &kp U  &kp I      &kp O           &kp P           &kp BSPC
&kp TAB    &kp A     &kp S     &kp D  &kp F  &kp G      &kp H  &kp J  &kp K      &kp L                           &kp ENTER
&kp LSHFT  &kp Z     &kp X     &kp C  &kp V  &kp B      &kp N  &kp M  &kp COMMA  &kp UP_ARROW                    &kp DELETE
&kp LCTRL  &kp LGUI  &kp LALT  &mo 1         &kp SPACE                &mo 2      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
            >;
        };

        rgb_layer {
            // ------------------------------------------------------------------------------------------------
            // | BT CLR | F1  | F2  | F3  | F4  | F5  | F6  | F7  | F8  | F9  | F10 | F11 | F12 | BOOT | BOOT |
            // |  BT 1   | TOG  |  UP |   | HUEUP | SATUP | BRIUP | SPDUP |   |     |   |    |    |  RGB_efect|
            // |   BT 2   | LT |  DN  | RT | HUEDN | SATDN | BRIDN | SPDDN |   |     |   |     |  EFFECT FORW |
            // |    BT 3     |     |      |      |     |     |     |     |     |     |     |                  |
            // |   BT 4  |      |      |             TOG RGB                | PRT SCR |    |    |     |  DEL  |
            // ------------------------------------------------------------------------------------------------

            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6      &kp N7    &kp N8    &kp N9    &kp N0    &kp MINUS  &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &kp LBKT    &kp RBKT  &kp BSLH  &kp SEMI  &kp APOS             &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans    &trans    &kp DOT              &kp FSLH
&trans  &trans  &trans  &trans          &kp C_MUTE                      &trans    &trans    &trans     &trans
            >;
        };

        layer_2 {
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5  &kp F6      &kp F7      &kp F8           &kp F9         &kp F10       &kp F11            &kp F12
&out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans      &kp INSERT  &kp PRINTSCREEN  &kp HOME       &kp END                          &trans
&trans        &trans        &bt BT_CLR    &bt BT_CLR    &trans  &trans      &trans      &kp PAGE_UP      &kp PAGE_DOWN  &kp C_VOL_UP                     &trans
&trans        &trans        &trans        &trans                &kp C_MUTE                               &trans         &trans        &kp C_VOLUME_DOWN  &trans
            >;
        };

        layer_3 {
            bindings = <
&out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &kp INSERT  &trans        &kp PRINTSCREEN    &kp DELETE
&trans        &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans      &trans                           &trans
&trans        &trans        &bt BT_CLR    &trans        &trans        &trans        &trans  &trans  &trans      &kp C_VOL_UP                     &trans
&trans        &trans        &trans        &trans                      &kp C_MUTE                    &trans      &trans        &kp C_VOLUME_DOWN  &trans
            >;
        };
    };
};
